class Breakout:
    def __init__(self, ticker, triggerlevel,stoploss,target1,target2, qty, ordertype,status,profit,handle):
        self.ticker = ticker
        self.triggerlevel = triggerlevel
        self.stoploss = stoploss
        self.target1 = target1
        self.target2 = target2

        self.ordertype = ordertype
        self.status = status
        self.profit = profit
        self.handle = handle

        self.qty = None
        self.max_loss = None

        if (self.stoploss == None):
            self.stoploss = 0.95 * self.triggerlevel

        if (self.target1 == None ):
            self.target1 = 1.3 * self.triggerlevel
        
        if (self.target2 == None):
            self.target2 = 2.0 * self.triggerlevel

        if (self.max_loss == None):
            self.max_loss = 100

        if (self.ordertype ==None):
            self.ordertype = 'LMT'


    def set_max_loss_percent(self, max_loss_percent):
        self.max_loss = max_loss_percent * self.triggerlevel

    def set_max_loss(self, max_loss):
        self.max_loss = max_loss


    def execute(self, current_price):
        if self.status == "":
            order = self.idle_state_execute(current_price)

        elif self.status == 'PreTarget1':
            order = self.pretarget1_state_execute(current_price)

        elif self.status == 'PreTarget2':
            order = self.pretarget2_state_execute(current_price)

        elif self.status == 'Exit':
            order = None
        return order

    def idle_state_execute(self, current_price):
        if current_price > self.triggerlevel:
            if self.ordertype == 'MKT':
                qty_unrounded = self.max_loss / (current_price - self.stoploss)
            else:
                qty_unrounded = self.max_loss / (self.triggerlevel - self.stoploss)
            #print(qty_unrounded)
            self.qty = round(qty_unrounded)
            out = Order(order_direction= 'buy', order_price= self.triggerlevel, order_type = self.ordertype, qty = self.qty)
            self.status = 'PreTarget1'
        else:
            out = None
        return out
        
    def pretarget1_state_execute(self, current_price):
        out = None
        if current_price > self.target1:
            out =  Order(order_direction= 'sell', order_price= self.target1, order_type = self.ordertype, qty = 0.5*self.qty)
            self.status = 'PreTarget2'
        elif current_price < self.stoploss:
            out =  Order(order_direction= 'sell', order_price= self.stoploss, order_type = self.ordertype, qty = 0.5*self.qty)
            self.status = 'PreTarget2'

        return out
    
    def pretarget2_state_execute(self, current_price):
        out = None
        if current_price > self.target1:
            out =  Order(order_direction= 'sell', order_price= self.target1, order_type = self.ordertype, qty = 0.5*self.qty)
            self.status = 'Exit'
        elif current_price < self.stoploss:
            out =  Order(order_direction= 'sell', order_price= self.stoploss, order_type = self.ordertype, qty = 0.5*self.qty)
            self.status = 'Exit'
        return out
    
    def exit_state_execute(self, current_price):
        pass

class Order:
    def __init__(self, order_direction, order_type, order_price, qty):
        self.order_type = order_type
        self.order_price = order_price
        self.order_direction = order_direction
        self.qty = qty
